# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

#1. What is the average danceability by artist and track?
select
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
from spotifydata
group by artist_name, track_name;

#2. Who are the top 10 artists based on popularity?
select artist_name, max(popularity) from spotifydata 
group by artist_name order by max(popularity) desc limit 10;

#3. What artist has an average popularity of over 80 where their nickname starts with the word "The"?
select artist_name, avg(popularity) as average
FROM spotifydata
where artist_name like 'The%' GROUP BY artist_name having average >79;

#4. What's the average danceability for the 10 most popular songs?
select avg(danceability) as Average,track_name as Songs,Popularity from spotifydata 
group by track_name order by popularity desc limit 10;

#5. Rank the artist's popularity into three categories: 'Bad,' 'Good,' 'Amazing'
select distinct artist_name Artists , case when popularity <= 79 then 'Bad' when popularity <= 89 then 'Good' when popularity <= 95 
then 'Amazing'else 'Unknown' end as Popularity from spotifydata 

#6. Track the popularity of each artist
select id, artist_name, track_name, popularity, dense_rank() 
OVER (partition by artist_name order by popularity desc) as popularity_rank from BIT_DB.Spotifydata;



